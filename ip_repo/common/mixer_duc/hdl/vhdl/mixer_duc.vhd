-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mixer_duc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    d_i0_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    d_i0_V_TVALID : IN STD_LOGIC;
    d_i0_V_TREADY : OUT STD_LOGIC;
    cfg0_V : IN STD_LOGIC_VECTOR (31 downto 0);
    d_o_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    d_o_V_full_n : IN STD_LOGIC;
    d_o_V_write : OUT STD_LOGIC );
end;


architecture behav of mixer_duc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mixer_duc,hls_ip_2017_4_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.970000,HLS_SYN_LAT=171,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=4,HLS_SYN_FF=665,HLS_SYN_LUT=864}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_A0 : STD_LOGIC_VECTOR (7 downto 0) := "10100000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal d_i0_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal d_i0_V_0_vld_in : STD_LOGIC;
    signal d_i0_V_0_vld_out : STD_LOGIC;
    signal d_i0_V_0_ack_in : STD_LOGIC;
    signal d_i0_V_0_ack_out : STD_LOGIC;
    signal d_i0_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal d_i0_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal d_i0_V_0_sel_rd : STD_LOGIC := '0';
    signal d_i0_V_0_sel_wr : STD_LOGIC := '0';
    signal d_i0_V_0_sel : STD_LOGIC;
    signal d_i0_V_0_load_A : STD_LOGIC;
    signal d_i0_V_0_load_B : STD_LOGIC;
    signal d_i0_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal d_i0_V_0_state_cmp_full : STD_LOGIC;
    signal i_p0n5n10n15n20MHz_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_p0n5n10n15n20MHz_ce0 : STD_LOGIC;
    signal i_p0n5n10n15n20MHz_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal q_p0n5n10n15n20MHz_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal q_p0n5n10n15n20MHz_ce0 : STD_LOGIC;
    signal q_p0n5n10n15n20MHz_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal d_i0_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_8_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal d_o_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter9_tmp_8_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_137 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_3_fu_148_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_194_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_200_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_cast_fu_210_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_8_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_tmp_8_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_8_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_tmp_8_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_tmp_8_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_tmp_8_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_tmp_8_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_tmp_8_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_tmp_8_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_220_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_16_fu_230_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_16_reg_487 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_18_fu_235_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_247_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_reg_508 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter2_tmp_17_reg_508 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter3_tmp_17_reg_508 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_1_reg_513 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter2_p_Result_1_reg_513 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter3_p_Result_1_reg_513 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter4_p_Result_1_reg_513 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_p0n5n10n15n20MHz_l_reg_518 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter3_i_p0n5n10n15n20MHz_l_reg_518 : STD_LOGIC_VECTOR (7 downto 0);
    signal q_p0n5n10n15n20MHz_l_reg_523 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_fu_266_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_reg_529 : STD_LOGIC_VECTOR (7 downto 0);
    signal bw20_a0_M_real_V_ca_fu_272_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal val_assign_cast_fu_275_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal val_assign_cast_reg_540 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_13_fu_278_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_13_reg_546 : STD_LOGIC_VECTOR (23 downto 0);
    signal bw20_a0_M_imag_V_ca_fu_281_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_427_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_i_i_reg_558 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_433_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_2_i_i_cast_reg_563 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_439_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_r_V_reg_568 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal grp_fu_445_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal complex_M_imag_V_wr_reg_574 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_3_fu_303_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_reg_580 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_reg_585 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_tmp_19_reg_585 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_590 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter9_tmp_4_reg_590 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_6_fu_341_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_6_reg_595 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_reg_600 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_tmp_20_reg_600 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_605 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter9_tmp_11_reg_605 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_381_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_reg_610 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_402_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_reg_615 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal tmp_17_cast_fu_242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_9_fu_166_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_170_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_14_fu_182_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_178_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_cast_fu_190_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal bw20_num_shift_to_le_fu_156_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal sh_V_1_fu_204_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_cast_fu_226_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mt_fu_261_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_1_fu_290_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_r_V_cast_fu_284_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_1_cast_fu_294_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_2_fu_298_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_4_fu_328_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal complex_M_imag_V_wr_1_fu_287_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_4_cast_fu_332_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_5_fu_336_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg5_fu_366_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_371_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_neg_fu_387_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_392_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_413_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_408_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_427_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_433_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_439_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_439_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_445_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_445_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_427_ce : STD_LOGIC;
    signal grp_fu_433_ce : STD_LOGIC;
    signal grp_fu_439_ce : STD_LOGIC;
    signal grp_fu_445_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component mixer_duc_mul_muldEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component mixer_duc_mac_muleOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component mixer_duc_mac_mulfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component mixer_duc_i_p0n5nbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mixer_duc_q_p0n5ncud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    i_p0n5n10n15n20MHz_U : component mixer_duc_i_p0n5nbkb
    generic map (
        DataWidth => 8,
        AddressRange => 800,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => i_p0n5n10n15n20MHz_address0,
        ce0 => i_p0n5n10n15n20MHz_ce0,
        q0 => i_p0n5n10n15n20MHz_q0);

    q_p0n5n10n15n20MHz_U : component mixer_duc_q_p0n5ncud
    generic map (
        DataWidth => 8,
        AddressRange => 800,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => q_p0n5n10n15n20MHz_address0,
        ce0 => q_p0n5n10n15n20MHz_ce0,
        q0 => q_p0n5n10n15n20MHz_q0);

    mixer_duc_mul_muldEe_U1 : component mixer_duc_mul_muldEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_427_p0,
        din1 => ap_reg_pp0_iter3_i_p0n5n10n15n20MHz_l_reg_518,
        ce => grp_fu_427_ce,
        dout => grp_fu_427_p2);

    mixer_duc_mul_muldEe_U2 : component mixer_duc_mul_muldEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_433_p0,
        din1 => r_V_reg_529,
        ce => grp_fu_433_ce,
        dout => grp_fu_433_p2);

    mixer_duc_mac_muleOg_U3 : component mixer_duc_mac_muleOg
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_439_p0,
        din1 => grp_fu_439_p1,
        din2 => p_i_i_reg_558,
        ce => grp_fu_439_ce,
        dout => grp_fu_439_p3);

    mixer_duc_mac_mulfYi_U4 : component mixer_duc_mac_mulfYi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_445_p0,
        din1 => grp_fu_445_p1,
        din2 => p_2_i_i_cast_reg_563,
        ce => grp_fu_445_ce,
        dout => grp_fu_445_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    d_i0_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_i0_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((d_i0_V_0_ack_out = ap_const_logic_1) and (d_i0_V_0_vld_out = ap_const_logic_1))) then 
                                        d_i0_V_0_sel_rd <= not(d_i0_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    d_i0_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_i0_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((d_i0_V_0_ack_in = ap_const_logic_1) and (d_i0_V_0_vld_in = ap_const_logic_1))) then 
                                        d_i0_V_0_sel_wr <= not(d_i0_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    d_i0_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_i0_V_0_state <= ap_const_lv2_0;
            else
                if ((((d_i0_V_0_vld_in = ap_const_logic_0) and (d_i0_V_0_state = ap_const_lv2_2)) or ((d_i0_V_0_vld_in = ap_const_logic_0) and (d_i0_V_0_state = ap_const_lv2_3) and (d_i0_V_0_ack_out = ap_const_logic_1)))) then 
                    d_i0_V_0_state <= ap_const_lv2_2;
                elsif ((((d_i0_V_0_ack_out = ap_const_logic_0) and (d_i0_V_0_state = ap_const_lv2_1)) or ((d_i0_V_0_ack_out = ap_const_logic_0) and (d_i0_V_0_state = ap_const_lv2_3) and (d_i0_V_0_vld_in = ap_const_logic_1)))) then 
                    d_i0_V_0_state <= ap_const_lv2_1;
                elsif (((not(((d_i0_V_0_vld_in = ap_const_logic_0) and (d_i0_V_0_ack_out = ap_const_logic_1))) and not(((d_i0_V_0_ack_out = ap_const_logic_0) and (d_i0_V_0_vld_in = ap_const_logic_1))) and (d_i0_V_0_state = ap_const_lv2_3)) or ((d_i0_V_0_state = ap_const_lv2_1) and (d_i0_V_0_ack_out = ap_const_logic_1)) or ((d_i0_V_0_state = ap_const_lv2_2) and (d_i0_V_0_vld_in = ap_const_logic_1)))) then 
                    d_i0_V_0_state <= ap_const_lv2_3;
                else 
                    d_i0_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_fu_214_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_137 <= i_1_fu_220_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                i_reg_137 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_reg_pp0_iter1_tmp_8_reg_478 <= tmp_8_reg_478;
                tmp_8_reg_478 <= tmp_8_fu_214_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_reg_pp0_iter2_p_Result_1_reg_513 <= p_Result_1_reg_513;
                ap_reg_pp0_iter2_tmp_17_reg_508 <= tmp_17_reg_508;
                ap_reg_pp0_iter2_tmp_8_reg_478 <= ap_reg_pp0_iter1_tmp_8_reg_478;
                ap_reg_pp0_iter3_i_p0n5n10n15n20MHz_l_reg_518 <= i_p0n5n10n15n20MHz_l_reg_518;
                ap_reg_pp0_iter3_p_Result_1_reg_513 <= ap_reg_pp0_iter2_p_Result_1_reg_513;
                ap_reg_pp0_iter3_tmp_17_reg_508 <= ap_reg_pp0_iter2_tmp_17_reg_508;
                ap_reg_pp0_iter3_tmp_8_reg_478 <= ap_reg_pp0_iter2_tmp_8_reg_478;
                ap_reg_pp0_iter4_p_Result_1_reg_513 <= ap_reg_pp0_iter3_p_Result_1_reg_513;
                ap_reg_pp0_iter4_tmp_8_reg_478 <= ap_reg_pp0_iter3_tmp_8_reg_478;
                ap_reg_pp0_iter5_tmp_8_reg_478 <= ap_reg_pp0_iter4_tmp_8_reg_478;
                ap_reg_pp0_iter6_tmp_8_reg_478 <= ap_reg_pp0_iter5_tmp_8_reg_478;
                ap_reg_pp0_iter7_tmp_8_reg_478 <= ap_reg_pp0_iter6_tmp_8_reg_478;
                ap_reg_pp0_iter8_tmp_8_reg_478 <= ap_reg_pp0_iter7_tmp_8_reg_478;
                ap_reg_pp0_iter9_tmp_11_reg_605 <= tmp_11_reg_605;
                ap_reg_pp0_iter9_tmp_19_reg_585 <= tmp_19_reg_585;
                ap_reg_pp0_iter9_tmp_20_reg_600 <= tmp_20_reg_600;
                ap_reg_pp0_iter9_tmp_4_reg_590 <= tmp_4_reg_590;
                ap_reg_pp0_iter9_tmp_8_reg_478 <= ap_reg_pp0_iter8_tmp_8_reg_478;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter6_tmp_8_reg_478 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                complex_M_imag_V_wr_reg_574 <= grp_fu_445_p3;
                p_r_V_reg_568 <= grp_fu_439_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((d_i0_V_0_load_A = ap_const_logic_1)) then
                d_i0_V_0_payload_A <= d_i0_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((d_i0_V_0_load_B = ap_const_logic_1)) then
                d_i0_V_0_payload_B <= d_i0_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_tmp_8_reg_478 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_p0n5n10n15n20MHz_l_reg_518 <= i_p0n5n10n15n20MHz_q0;
                q_p0n5n10n15n20MHz_l_reg_523 <= q_p0n5n10n15n20MHz_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter5_tmp_8_reg_478 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_2_i_i_cast_reg_563 <= grp_fu_433_p2;
                p_i_i_reg_558 <= grp_fu_427_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_reg_478 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Result_1_reg_513 <= d_i0_V_0_data_out(31 downto 16);
                tmp_17_reg_508 <= tmp_17_fu_247_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter7_tmp_8_reg_478 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                r_V_3_reg_580 <= r_V_3_fu_303_p3;
                r_V_6_reg_595 <= r_V_6_fu_341_p3;
                tmp_11_reg_605 <= r_V_6_fu_341_p3(21 downto 6);
                tmp_19_reg_585 <= r_V_3_fu_303_p3(31 downto 31);
                tmp_20_reg_600 <= r_V_6_fu_341_p3(31 downto 31);
                tmp_4_reg_590 <= r_V_3_fu_303_p3(21 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_tmp_8_reg_478 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                r_V_reg_529 <= r_V_fu_266_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_20_reg_600 = ap_const_lv1_1) and (ap_reg_pp0_iter8_tmp_8_reg_478 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_10_reg_615 <= tmp_10_fu_402_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter3_tmp_8_reg_478 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_13_reg_546 <= tmp_13_fu_278_p1;
                val_assign_cast_reg_540 <= val_assign_cast_fu_275_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_fu_214_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_16_reg_487 <= tmp_16_fu_230_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_19_reg_585 = ap_const_lv1_1) and (ap_reg_pp0_iter8_tmp_8_reg_478 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_2_reg_610 <= tmp_2_fu_381_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter10, tmp_8_fu_214_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((tmp_8_fu_214_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((tmp_8_fu_214_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(d_i0_V_0_vld_out, d_o_V_full_n, ap_enable_reg_pp0_iter1, tmp_8_reg_478, ap_enable_reg_pp0_iter10, ap_reg_pp0_iter9_tmp_8_reg_478)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_reg_pp0_iter9_tmp_8_reg_478 = ap_const_lv1_0) and (d_o_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1)) or ((tmp_8_reg_478 = ap_const_lv1_0) and (d_i0_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(d_i0_V_0_vld_out, d_o_V_full_n, ap_enable_reg_pp0_iter1, tmp_8_reg_478, ap_enable_reg_pp0_iter10, ap_reg_pp0_iter9_tmp_8_reg_478)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_reg_pp0_iter9_tmp_8_reg_478 = ap_const_lv1_0) and (d_o_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1)) or ((tmp_8_reg_478 = ap_const_lv1_0) and (d_i0_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(d_i0_V_0_vld_out, d_o_V_full_n, ap_enable_reg_pp0_iter1, tmp_8_reg_478, ap_enable_reg_pp0_iter10, ap_reg_pp0_iter9_tmp_8_reg_478)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_reg_pp0_iter9_tmp_8_reg_478 = ap_const_lv1_0) and (d_o_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1)) or ((tmp_8_reg_478 = ap_const_lv1_0) and (d_i0_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_pp0_stage0_iter10_assign_proc : process(d_o_V_full_n, ap_reg_pp0_iter9_tmp_8_reg_478)
    begin
                ap_block_state12_pp0_stage0_iter10 <= ((ap_reg_pp0_iter9_tmp_8_reg_478 = ap_const_lv1_0) and (d_o_V_full_n = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(d_i0_V_0_vld_out, tmp_8_reg_478)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((tmp_8_reg_478 = ap_const_lv1_0) and (d_i0_V_0_vld_out = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(tmp_8_fu_214_p2)
    begin
        if ((tmp_8_fu_214_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

        bw20_a0_M_imag_V_ca_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_reg_pp0_iter4_p_Result_1_reg_513),24));

        bw20_a0_M_real_V_ca_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_reg_pp0_iter3_tmp_17_reg_508),24));

    bw20_num_shift_to_le_fu_156_p4 <= cfg0_V(31 downto 28);
        complex_M_imag_V_wr_1_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(complex_M_imag_V_wr_reg_574),32));

    d_i0_V_0_ack_in <= d_i0_V_0_state(1);

    d_i0_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_8_reg_478, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_8_reg_478 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            d_i0_V_0_ack_out <= ap_const_logic_1;
        else 
            d_i0_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    d_i0_V_0_data_out_assign_proc : process(d_i0_V_0_payload_A, d_i0_V_0_payload_B, d_i0_V_0_sel)
    begin
        if ((d_i0_V_0_sel = ap_const_logic_1)) then 
            d_i0_V_0_data_out <= d_i0_V_0_payload_B;
        else 
            d_i0_V_0_data_out <= d_i0_V_0_payload_A;
        end if; 
    end process;

    d_i0_V_0_load_A <= (not(d_i0_V_0_sel_wr) and d_i0_V_0_state_cmp_full);
    d_i0_V_0_load_B <= (d_i0_V_0_state_cmp_full and d_i0_V_0_sel_wr);
    d_i0_V_0_sel <= d_i0_V_0_sel_rd;
    d_i0_V_0_state_cmp_full <= '0' when (d_i0_V_0_state = ap_const_lv2_1) else '1';
    d_i0_V_0_vld_in <= d_i0_V_TVALID;
    d_i0_V_0_vld_out <= d_i0_V_0_state(0);

    d_i0_V_TDATA_blk_n_assign_proc : process(d_i0_V_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_8_reg_478)
    begin
        if (((tmp_8_reg_478 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            d_i0_V_TDATA_blk_n <= d_i0_V_0_state(0);
        else 
            d_i0_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    d_i0_V_TREADY <= d_i0_V_0_state(1);

    d_o_V_blk_n_assign_proc : process(d_o_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter10, ap_reg_pp0_iter9_tmp_8_reg_478)
    begin
        if (((ap_reg_pp0_iter9_tmp_8_reg_478 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            d_o_V_blk_n <= d_o_V_full_n;
        else 
            d_o_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    d_o_V_din <= (tmp_12_fu_413_p3 & tmp_6_fu_408_p3);

    d_o_V_write_assign_proc : process(ap_enable_reg_pp0_iter10, ap_reg_pp0_iter9_tmp_8_reg_478, ap_block_pp0_stage0_11001)
    begin
        if (((ap_reg_pp0_iter9_tmp_8_reg_478 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            d_o_V_write <= ap_const_logic_1;
        else 
            d_o_V_write <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_427_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_427_ce <= ap_const_logic_1;
        else 
            grp_fu_427_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_427_p0 <= bw20_a0_M_real_V_ca_fu_272_p1(16 - 1 downto 0);

    grp_fu_433_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_433_ce <= ap_const_logic_1;
        else 
            grp_fu_433_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_433_p0 <= bw20_a0_M_real_V_ca_fu_272_p1(16 - 1 downto 0);

    grp_fu_439_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_439_ce <= ap_const_logic_1;
        else 
            grp_fu_439_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_439_p0 <= bw20_a0_M_imag_V_ca_fu_281_p1(16 - 1 downto 0);
    grp_fu_439_p1 <= tmp_13_reg_546(8 - 1 downto 0);

    grp_fu_445_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_445_ce <= ap_const_logic_1;
        else 
            grp_fu_445_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_445_p0 <= bw20_a0_M_imag_V_ca_fu_281_p1(16 - 1 downto 0);
    grp_fu_445_p1 <= val_assign_cast_reg_540(8 - 1 downto 0);
    i_1_fu_220_p2 <= std_logic_vector(unsigned(i_reg_137) + unsigned(ap_const_lv8_1));
    i_p0n5n10n15n20MHz_address0 <= tmp_17_cast_fu_242_p1(10 - 1 downto 0);

    i_p0n5n10n15n20MHz_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            i_p0n5n10n15n20MHz_ce0 <= ap_const_logic_1;
        else 
            i_p0n5n10n15n20MHz_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mt_fu_261_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(q_p0n5n10n15n20MHz_l_reg_523));
    p_neg5_fu_366_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(r_V_3_reg_580));
    p_neg_fu_387_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(r_V_6_reg_595));
        p_r_V_cast_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_r_V_reg_568),32));

    p_shl1_cast_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_182_p3),10));
    p_shl_cast_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_170_p3),10));
    q_p0n5n10n15n20MHz_address0 <= tmp_17_cast_fu_242_p1(10 - 1 downto 0);

    q_p0n5n10n15n20MHz_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            q_p0n5n10n15n20MHz_ce0 <= ap_const_logic_1;
        else 
            q_p0n5n10n15n20MHz_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        r_V_1_cast_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_1_fu_290_p2),32));

    r_V_1_fu_290_p2 <= std_logic_vector(shift_right(signed(p_r_V_reg_568),to_integer(unsigned('0' & tmp_7_cast_fu_210_p1(24-1 downto 0)))));
    r_V_2_fu_298_p2 <= std_logic_vector(shift_left(unsigned(p_r_V_cast_fu_284_p1),to_integer(unsigned('0' & tmp_5_fu_200_p1(31-1 downto 0)))));
    r_V_3_fu_303_p3 <= 
        r_V_1_cast_fu_294_p1 when (tmp_18_fu_235_p3(0) = '1') else 
        r_V_2_fu_298_p2;
        r_V_4_cast_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_4_fu_328_p2),32));

    r_V_4_fu_328_p2 <= std_logic_vector(shift_right(signed(complex_M_imag_V_wr_reg_574),to_integer(unsigned('0' & tmp_7_cast_fu_210_p1(24-1 downto 0)))));
    r_V_5_fu_336_p2 <= std_logic_vector(shift_left(unsigned(complex_M_imag_V_wr_1_fu_287_p1),to_integer(unsigned('0' & tmp_5_fu_200_p1(31-1 downto 0)))));
    r_V_6_fu_341_p3 <= 
        r_V_4_cast_fu_332_p1 when (tmp_18_fu_235_p3(0) = '1') else 
        r_V_5_fu_336_p2;
    r_V_fu_266_p3 <= 
        mt_fu_261_p2 when (tmp_3_fu_148_p3(0) = '1') else 
        q_p0n5n10n15n20MHz_l_reg_523;
    sh_V_1_fu_204_p2 <= std_logic_vector(unsigned(ap_const_lv4_0) - unsigned(bw20_num_shift_to_le_fu_156_p4));
    tmp_10_fu_402_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(tmp_s_fu_392_p4));
    tmp_12_fu_413_p3 <= 
        tmp_10_reg_615 when (ap_reg_pp0_iter9_tmp_20_reg_600(0) = '1') else 
        ap_reg_pp0_iter9_tmp_11_reg_605;
        tmp_13_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_reg_529),24));

    tmp_14_fu_182_p3 <= (tmp_9_fu_166_p1 & ap_const_lv5_0);
    tmp_15_fu_194_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_178_p1) + unsigned(p_shl1_cast_fu_190_p1));
    tmp_16_fu_230_p2 <= std_logic_vector(unsigned(tmp_9_cast_fu_226_p1) + unsigned(tmp_15_fu_194_p2));
    tmp_17_cast_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_reg_487),64));
    tmp_17_fu_247_p1 <= d_i0_V_0_data_out(16 - 1 downto 0);
    tmp_18_fu_235_p3 <= cfg0_V(31 downto 31);
    tmp_1_fu_371_p4 <= p_neg5_fu_366_p2(21 downto 6);
    tmp_2_fu_381_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(tmp_1_fu_371_p4));
    tmp_3_fu_148_p3 <= cfg0_V(2 downto 2);
    tmp_5_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bw20_num_shift_to_le_fu_156_p4),32));
    tmp_6_fu_408_p3 <= 
        tmp_2_reg_610 when (ap_reg_pp0_iter9_tmp_19_reg_585(0) = '1') else 
        ap_reg_pp0_iter9_tmp_4_reg_590;
    tmp_7_cast_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_V_1_fu_204_p2),24));
    tmp_7_fu_170_p3 <= (tmp_9_fu_166_p1 & ap_const_lv7_0);
    tmp_8_fu_214_p2 <= "1" when (i_reg_137 = ap_const_lv8_A0) else "0";
    tmp_9_cast_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_137),10));
    tmp_9_fu_166_p1 <= cfg0_V(2 - 1 downto 0);
    tmp_s_fu_392_p4 <= p_neg_fu_387_p2(21 downto 6);
        val_assign_cast_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_reg_pp0_iter3_i_p0n5n10n15n20MHz_l_reg_518),24));

end behav;
