// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mixer_duc,hls_ip_2017_4_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.970000,HLS_SYN_LAT=171,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=4,HLS_SYN_FF=665,HLS_SYN_LUT=864}" *)

module mixer_duc (
        ap_clk,
        ap_rst_n,
        d_i0_V_TDATA,
        d_i0_V_TVALID,
        d_i0_V_TREADY,
        cfg0_V,
        d_o_V_din,
        d_o_V_full_n,
        d_o_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state13 = 3'd4;

input   ap_clk;
input   ap_rst_n;
input  [31:0] d_i0_V_TDATA;
input   d_i0_V_TVALID;
output   d_i0_V_TREADY;
input  [31:0] cfg0_V;
output  [31:0] d_o_V_din;
input   d_o_V_full_n;
output   d_o_V_write;

reg d_o_V_write;

reg    ap_rst_n_inv;
reg   [31:0] d_i0_V_0_data_out;
wire    d_i0_V_0_vld_in;
wire    d_i0_V_0_vld_out;
wire    d_i0_V_0_ack_in;
reg    d_i0_V_0_ack_out;
reg   [31:0] d_i0_V_0_payload_A;
reg   [31:0] d_i0_V_0_payload_B;
reg    d_i0_V_0_sel_rd;
reg    d_i0_V_0_sel_wr;
wire    d_i0_V_0_sel;
wire    d_i0_V_0_load_A;
wire    d_i0_V_0_load_B;
reg   [1:0] d_i0_V_0_state;
wire    d_i0_V_0_state_cmp_full;
wire   [9:0] i_p0n5n10n15n20MHz_address0;
reg    i_p0n5n10n15n20MHz_ce0;
wire   [7:0] i_p0n5n10n15n20MHz_q0;
wire   [9:0] q_p0n5n10n15n20MHz_address0;
reg    q_p0n5n10n15n20MHz_ce0;
wire   [7:0] q_p0n5n10n15n20MHz_q0;
reg    d_i0_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_8_reg_478;
reg    d_o_V_blk_n;
reg    ap_enable_reg_pp0_iter10;
reg   [0:0] ap_reg_pp0_iter9_tmp_8_reg_478;
reg   [7:0] i_reg_137;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_3_fu_148_p3;
wire   [9:0] tmp_15_fu_194_p2;
wire   [31:0] tmp_5_fu_200_p1;
wire   [23:0] tmp_7_cast_fu_210_p1;
wire   [0:0] tmp_8_fu_214_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
reg    ap_block_state12_pp0_stage0_iter10;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_tmp_8_reg_478;
reg   [0:0] ap_reg_pp0_iter2_tmp_8_reg_478;
reg   [0:0] ap_reg_pp0_iter3_tmp_8_reg_478;
reg   [0:0] ap_reg_pp0_iter4_tmp_8_reg_478;
reg   [0:0] ap_reg_pp0_iter5_tmp_8_reg_478;
reg   [0:0] ap_reg_pp0_iter6_tmp_8_reg_478;
reg   [0:0] ap_reg_pp0_iter7_tmp_8_reg_478;
reg   [0:0] ap_reg_pp0_iter8_tmp_8_reg_478;
wire   [7:0] i_1_fu_220_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [9:0] tmp_16_fu_230_p2;
reg   [9:0] tmp_16_reg_487;
wire   [0:0] tmp_18_fu_235_p3;
wire   [15:0] tmp_17_fu_247_p1;
reg   [15:0] tmp_17_reg_508;
reg   [15:0] ap_reg_pp0_iter2_tmp_17_reg_508;
reg   [15:0] ap_reg_pp0_iter3_tmp_17_reg_508;
reg   [15:0] p_Result_1_reg_513;
reg   [15:0] ap_reg_pp0_iter2_p_Result_1_reg_513;
reg   [15:0] ap_reg_pp0_iter3_p_Result_1_reg_513;
reg   [15:0] ap_reg_pp0_iter4_p_Result_1_reg_513;
reg   [7:0] i_p0n5n10n15n20MHz_l_reg_518;
reg  signed [7:0] ap_reg_pp0_iter3_i_p0n5n10n15n20MHz_l_reg_518;
reg   [7:0] q_p0n5n10n15n20MHz_l_reg_523;
wire   [7:0] r_V_fu_266_p3;
reg  signed [7:0] r_V_reg_529;
wire  signed [23:0] bw20_a0_M_real_V_ca_fu_272_p1;
wire  signed [23:0] val_assign_cast_fu_275_p1;
reg  signed [23:0] val_assign_cast_reg_540;
wire  signed [23:0] tmp_13_fu_278_p1;
reg  signed [23:0] tmp_13_reg_546;
wire  signed [23:0] bw20_a0_M_imag_V_ca_fu_281_p1;
wire  signed [23:0] grp_fu_427_p2;
reg  signed [23:0] p_i_i_reg_558;
wire  signed [23:0] grp_fu_433_p2;
reg  signed [23:0] p_2_i_i_cast_reg_563;
wire  signed [23:0] grp_fu_439_p3;
reg  signed [23:0] p_r_V_reg_568;
reg    ap_enable_reg_pp0_iter7;
wire  signed [23:0] grp_fu_445_p3;
reg  signed [23:0] complex_M_imag_V_wr_reg_574;
wire   [31:0] r_V_3_fu_303_p3;
reg   [31:0] r_V_3_reg_580;
reg   [0:0] tmp_19_reg_585;
reg   [0:0] ap_reg_pp0_iter9_tmp_19_reg_585;
reg   [15:0] tmp_4_reg_590;
reg   [15:0] ap_reg_pp0_iter9_tmp_4_reg_590;
wire   [31:0] r_V_6_fu_341_p3;
reg   [31:0] r_V_6_reg_595;
reg   [0:0] tmp_20_reg_600;
reg   [0:0] ap_reg_pp0_iter9_tmp_20_reg_600;
reg   [15:0] tmp_11_reg_605;
reg   [15:0] ap_reg_pp0_iter9_tmp_11_reg_605;
wire   [15:0] tmp_2_fu_381_p2;
reg   [15:0] tmp_2_reg_610;
wire   [15:0] tmp_10_fu_402_p2;
reg   [15:0] tmp_10_reg_615;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
wire   [63:0] tmp_17_cast_fu_242_p1;
reg    ap_block_pp0_stage0_01001;
wire   [1:0] tmp_9_fu_166_p1;
wire   [8:0] tmp_7_fu_170_p3;
wire   [6:0] tmp_14_fu_182_p3;
wire   [9:0] p_shl_cast_fu_178_p1;
wire   [9:0] p_shl1_cast_fu_190_p1;
wire   [3:0] bw20_num_shift_to_le_fu_156_p4;
wire   [3:0] sh_V_1_fu_204_p2;
wire   [9:0] tmp_9_cast_fu_226_p1;
wire   [7:0] mt_fu_261_p2;
wire   [23:0] r_V_1_fu_290_p2;
wire  signed [31:0] p_r_V_cast_fu_284_p1;
wire  signed [31:0] r_V_1_cast_fu_294_p1;
wire   [31:0] r_V_2_fu_298_p2;
wire   [23:0] r_V_4_fu_328_p2;
wire  signed [31:0] complex_M_imag_V_wr_1_fu_287_p1;
wire  signed [31:0] r_V_4_cast_fu_332_p1;
wire   [31:0] r_V_5_fu_336_p2;
wire   [31:0] p_neg5_fu_366_p2;
wire   [15:0] tmp_1_fu_371_p4;
wire   [31:0] p_neg_fu_387_p2;
wire   [15:0] tmp_s_fu_392_p4;
wire   [15:0] tmp_12_fu_413_p3;
wire   [15:0] tmp_6_fu_408_p3;
wire  signed [15:0] grp_fu_427_p0;
wire  signed [15:0] grp_fu_433_p0;
wire  signed [15:0] grp_fu_439_p0;
wire  signed [7:0] grp_fu_439_p1;
wire  signed [15:0] grp_fu_445_p0;
wire  signed [7:0] grp_fu_445_p1;
reg    grp_fu_427_ce;
reg    grp_fu_433_ce;
reg    grp_fu_439_ce;
reg    grp_fu_445_ce;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 d_i0_V_0_sel_rd = 1'b0;
#0 d_i0_V_0_sel_wr = 1'b0;
#0 d_i0_V_0_state = 2'd0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
end

mixer_duc_i_p0n5nbkb #(
    .DataWidth( 8 ),
    .AddressRange( 800 ),
    .AddressWidth( 10 ))
i_p0n5n10n15n20MHz_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(i_p0n5n10n15n20MHz_address0),
    .ce0(i_p0n5n10n15n20MHz_ce0),
    .q0(i_p0n5n10n15n20MHz_q0)
);

mixer_duc_q_p0n5ncud #(
    .DataWidth( 8 ),
    .AddressRange( 800 ),
    .AddressWidth( 10 ))
q_p0n5n10n15n20MHz_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(q_p0n5n10n15n20MHz_address0),
    .ce0(q_p0n5n10n15n20MHz_ce0),
    .q0(q_p0n5n10n15n20MHz_q0)
);

mixer_duc_mul_muldEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
mixer_duc_mul_muldEe_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_427_p0),
    .din1(ap_reg_pp0_iter3_i_p0n5n10n15n20MHz_l_reg_518),
    .ce(grp_fu_427_ce),
    .dout(grp_fu_427_p2)
);

mixer_duc_mul_muldEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
mixer_duc_mul_muldEe_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_433_p0),
    .din1(r_V_reg_529),
    .ce(grp_fu_433_ce),
    .dout(grp_fu_433_p2)
);

mixer_duc_mac_muleOg #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mixer_duc_mac_muleOg_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_439_p0),
    .din1(grp_fu_439_p1),
    .din2(p_i_i_reg_558),
    .ce(grp_fu_439_ce),
    .dout(grp_fu_439_p3)
);

mixer_duc_mac_mulfYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mixer_duc_mac_mulfYi_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_445_p0),
    .din1(grp_fu_445_p1),
    .din2(p_2_i_i_cast_reg_563),
    .ce(grp_fu_445_ce),
    .dout(grp_fu_445_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter10 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_i0_V_0_sel_rd <= 1'b0;
    end else begin
        if (((d_i0_V_0_ack_out == 1'b1) & (d_i0_V_0_vld_out == 1'b1))) begin
            d_i0_V_0_sel_rd <= ~d_i0_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_i0_V_0_sel_wr <= 1'b0;
    end else begin
        if (((d_i0_V_0_ack_in == 1'b1) & (d_i0_V_0_vld_in == 1'b1))) begin
            d_i0_V_0_sel_wr <= ~d_i0_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        d_i0_V_0_state <= 2'd0;
    end else begin
        if ((((d_i0_V_0_vld_in == 1'b0) & (d_i0_V_0_state == 2'd2)) | ((d_i0_V_0_vld_in == 1'b0) & (d_i0_V_0_state == 2'd3) & (d_i0_V_0_ack_out == 1'b1)))) begin
            d_i0_V_0_state <= 2'd2;
        end else if ((((d_i0_V_0_ack_out == 1'b0) & (d_i0_V_0_state == 2'd1)) | ((d_i0_V_0_ack_out == 1'b0) & (d_i0_V_0_state == 2'd3) & (d_i0_V_0_vld_in == 1'b1)))) begin
            d_i0_V_0_state <= 2'd1;
        end else if (((~((d_i0_V_0_vld_in == 1'b0) & (d_i0_V_0_ack_out == 1'b1)) & ~((d_i0_V_0_ack_out == 1'b0) & (d_i0_V_0_vld_in == 1'b1)) & (d_i0_V_0_state == 2'd3)) | ((d_i0_V_0_state == 2'd1) & (d_i0_V_0_ack_out == 1'b1)) | ((d_i0_V_0_state == 2'd2) & (d_i0_V_0_vld_in == 1'b1)))) begin
            d_i0_V_0_state <= 2'd3;
        end else begin
            d_i0_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_8_fu_214_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_137 <= i_1_fu_220_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        i_reg_137 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_reg_pp0_iter1_tmp_8_reg_478 <= tmp_8_reg_478;
        tmp_8_reg_478 <= tmp_8_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter2_p_Result_1_reg_513 <= p_Result_1_reg_513;
        ap_reg_pp0_iter2_tmp_17_reg_508 <= tmp_17_reg_508;
        ap_reg_pp0_iter2_tmp_8_reg_478 <= ap_reg_pp0_iter1_tmp_8_reg_478;
        ap_reg_pp0_iter3_i_p0n5n10n15n20MHz_l_reg_518 <= i_p0n5n10n15n20MHz_l_reg_518;
        ap_reg_pp0_iter3_p_Result_1_reg_513 <= ap_reg_pp0_iter2_p_Result_1_reg_513;
        ap_reg_pp0_iter3_tmp_17_reg_508 <= ap_reg_pp0_iter2_tmp_17_reg_508;
        ap_reg_pp0_iter3_tmp_8_reg_478 <= ap_reg_pp0_iter2_tmp_8_reg_478;
        ap_reg_pp0_iter4_p_Result_1_reg_513 <= ap_reg_pp0_iter3_p_Result_1_reg_513;
        ap_reg_pp0_iter4_tmp_8_reg_478 <= ap_reg_pp0_iter3_tmp_8_reg_478;
        ap_reg_pp0_iter5_tmp_8_reg_478 <= ap_reg_pp0_iter4_tmp_8_reg_478;
        ap_reg_pp0_iter6_tmp_8_reg_478 <= ap_reg_pp0_iter5_tmp_8_reg_478;
        ap_reg_pp0_iter7_tmp_8_reg_478 <= ap_reg_pp0_iter6_tmp_8_reg_478;
        ap_reg_pp0_iter8_tmp_8_reg_478 <= ap_reg_pp0_iter7_tmp_8_reg_478;
        ap_reg_pp0_iter9_tmp_11_reg_605 <= tmp_11_reg_605;
        ap_reg_pp0_iter9_tmp_19_reg_585 <= tmp_19_reg_585;
        ap_reg_pp0_iter9_tmp_20_reg_600 <= tmp_20_reg_600;
        ap_reg_pp0_iter9_tmp_4_reg_590 <= tmp_4_reg_590;
        ap_reg_pp0_iter9_tmp_8_reg_478 <= ap_reg_pp0_iter8_tmp_8_reg_478;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter6_tmp_8_reg_478 == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        complex_M_imag_V_wr_reg_574 <= grp_fu_445_p3;
        p_r_V_reg_568 <= grp_fu_439_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((d_i0_V_0_load_A == 1'b1)) begin
        d_i0_V_0_payload_A <= d_i0_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((d_i0_V_0_load_B == 1'b1)) begin
        d_i0_V_0_payload_B <= d_i0_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_tmp_8_reg_478 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_p0n5n10n15n20MHz_l_reg_518 <= i_p0n5n10n15n20MHz_q0;
        q_p0n5n10n15n20MHz_l_reg_523 <= q_p0n5n10n15n20MHz_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter5_tmp_8_reg_478 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_2_i_i_cast_reg_563 <= grp_fu_433_p2;
        p_i_i_reg_558 <= grp_fu_427_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_8_reg_478 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Result_1_reg_513 <= {{d_i0_V_0_data_out[31:16]}};
        tmp_17_reg_508 <= tmp_17_fu_247_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter7_tmp_8_reg_478 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        r_V_3_reg_580 <= r_V_3_fu_303_p3;
        r_V_6_reg_595 <= r_V_6_fu_341_p3;
        tmp_11_reg_605 <= {{r_V_6_fu_341_p3[21:6]}};
        tmp_19_reg_585 <= r_V_3_fu_303_p3[32'd31];
        tmp_20_reg_600 <= r_V_6_fu_341_p3[32'd31];
        tmp_4_reg_590 <= {{r_V_3_fu_303_p3[21:6]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_tmp_8_reg_478 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        r_V_reg_529 <= r_V_fu_266_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_20_reg_600 == 1'd1) & (ap_reg_pp0_iter8_tmp_8_reg_478 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_10_reg_615 <= tmp_10_fu_402_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter3_tmp_8_reg_478 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_13_reg_546 <= tmp_13_fu_278_p1;
        val_assign_cast_reg_540 <= val_assign_cast_fu_275_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_8_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_16_reg_487 <= tmp_16_fu_230_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_19_reg_585 == 1'd1) & (ap_reg_pp0_iter8_tmp_8_reg_478 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_2_reg_610 <= tmp_2_fu_381_p2;
    end
end

always @ (*) begin
    if ((tmp_8_fu_214_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_8_reg_478 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        d_i0_V_0_ack_out = 1'b1;
    end else begin
        d_i0_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((d_i0_V_0_sel == 1'b1)) begin
        d_i0_V_0_data_out = d_i0_V_0_payload_B;
    end else begin
        d_i0_V_0_data_out = d_i0_V_0_payload_A;
    end
end

always @ (*) begin
    if (((tmp_8_reg_478 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        d_i0_V_TDATA_blk_n = d_i0_V_0_state[1'd0];
    end else begin
        d_i0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter9_tmp_8_reg_478 == 1'd0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        d_o_V_blk_n = d_o_V_full_n;
    end else begin
        d_o_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter9_tmp_8_reg_478 == 1'd0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        d_o_V_write = 1'b1;
    end else begin
        d_o_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_427_ce = 1'b1;
    end else begin
        grp_fu_427_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_433_ce = 1'b1;
    end else begin
        grp_fu_433_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_439_ce = 1'b1;
    end else begin
        grp_fu_439_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_445_ce = 1'b1;
    end else begin
        grp_fu_445_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_p0n5n10n15n20MHz_ce0 = 1'b1;
    end else begin
        i_p0n5n10n15n20MHz_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        q_p0n5n10n15n20MHz_ce0 = 1'b1;
    end else begin
        q_p0n5n10n15n20MHz_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((tmp_8_fu_214_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter9 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter10 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((tmp_8_fu_214_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter9 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter10 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_reg_pp0_iter9_tmp_8_reg_478 == 1'd0) & (d_o_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1)) | ((tmp_8_reg_478 == 1'd0) & (d_i0_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_reg_pp0_iter9_tmp_8_reg_478 == 1'd0) & (d_o_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1)) | ((tmp_8_reg_478 == 1'd0) & (d_i0_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_reg_pp0_iter9_tmp_8_reg_478 == 1'd0) & (d_o_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1)) | ((tmp_8_reg_478 == 1'd0) & (d_i0_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp0_stage0_iter10 = ((ap_reg_pp0_iter9_tmp_8_reg_478 == 1'd0) & (d_o_V_full_n == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((tmp_8_reg_478 == 1'd0) & (d_i0_V_0_vld_out == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bw20_a0_M_imag_V_ca_fu_281_p1 = $signed(ap_reg_pp0_iter4_p_Result_1_reg_513);

assign bw20_a0_M_real_V_ca_fu_272_p1 = $signed(ap_reg_pp0_iter3_tmp_17_reg_508);

assign bw20_num_shift_to_le_fu_156_p4 = {{cfg0_V[31:28]}};

assign complex_M_imag_V_wr_1_fu_287_p1 = complex_M_imag_V_wr_reg_574;

assign d_i0_V_0_ack_in = d_i0_V_0_state[1'd1];

assign d_i0_V_0_load_A = (~d_i0_V_0_sel_wr & d_i0_V_0_state_cmp_full);

assign d_i0_V_0_load_B = (d_i0_V_0_state_cmp_full & d_i0_V_0_sel_wr);

assign d_i0_V_0_sel = d_i0_V_0_sel_rd;

assign d_i0_V_0_state_cmp_full = ((d_i0_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign d_i0_V_0_vld_in = d_i0_V_TVALID;

assign d_i0_V_0_vld_out = d_i0_V_0_state[1'd0];

assign d_i0_V_TREADY = d_i0_V_0_state[1'd1];

assign d_o_V_din = {{tmp_12_fu_413_p3}, {tmp_6_fu_408_p3}};

assign grp_fu_427_p0 = bw20_a0_M_real_V_ca_fu_272_p1;

assign grp_fu_433_p0 = bw20_a0_M_real_V_ca_fu_272_p1;

assign grp_fu_439_p0 = bw20_a0_M_imag_V_ca_fu_281_p1;

assign grp_fu_439_p1 = tmp_13_reg_546;

assign grp_fu_445_p0 = bw20_a0_M_imag_V_ca_fu_281_p1;

assign grp_fu_445_p1 = val_assign_cast_reg_540;

assign i_1_fu_220_p2 = (i_reg_137 + 8'd1);

assign i_p0n5n10n15n20MHz_address0 = tmp_17_cast_fu_242_p1;

assign mt_fu_261_p2 = (8'd0 - q_p0n5n10n15n20MHz_l_reg_523);

assign p_neg5_fu_366_p2 = (32'd0 - r_V_3_reg_580);

assign p_neg_fu_387_p2 = (32'd0 - r_V_6_reg_595);

assign p_r_V_cast_fu_284_p1 = p_r_V_reg_568;

assign p_shl1_cast_fu_190_p1 = tmp_14_fu_182_p3;

assign p_shl_cast_fu_178_p1 = tmp_7_fu_170_p3;

assign q_p0n5n10n15n20MHz_address0 = tmp_17_cast_fu_242_p1;

assign r_V_1_cast_fu_294_p1 = $signed(r_V_1_fu_290_p2);

assign r_V_1_fu_290_p2 = $signed(p_r_V_reg_568) >>> tmp_7_cast_fu_210_p1;

assign r_V_2_fu_298_p2 = p_r_V_cast_fu_284_p1 << tmp_5_fu_200_p1;

assign r_V_3_fu_303_p3 = ((tmp_18_fu_235_p3[0:0] === 1'b1) ? r_V_1_cast_fu_294_p1 : r_V_2_fu_298_p2);

assign r_V_4_cast_fu_332_p1 = $signed(r_V_4_fu_328_p2);

assign r_V_4_fu_328_p2 = $signed(complex_M_imag_V_wr_reg_574) >>> tmp_7_cast_fu_210_p1;

assign r_V_5_fu_336_p2 = complex_M_imag_V_wr_1_fu_287_p1 << tmp_5_fu_200_p1;

assign r_V_6_fu_341_p3 = ((tmp_18_fu_235_p3[0:0] === 1'b1) ? r_V_4_cast_fu_332_p1 : r_V_5_fu_336_p2);

assign r_V_fu_266_p3 = ((tmp_3_fu_148_p3[0:0] === 1'b1) ? mt_fu_261_p2 : q_p0n5n10n15n20MHz_l_reg_523);

assign sh_V_1_fu_204_p2 = (4'd0 - bw20_num_shift_to_le_fu_156_p4);

assign tmp_10_fu_402_p2 = (16'd0 - tmp_s_fu_392_p4);

assign tmp_12_fu_413_p3 = ((ap_reg_pp0_iter9_tmp_20_reg_600[0:0] === 1'b1) ? tmp_10_reg_615 : ap_reg_pp0_iter9_tmp_11_reg_605);

assign tmp_13_fu_278_p1 = r_V_reg_529;

assign tmp_14_fu_182_p3 = {{tmp_9_fu_166_p1}, {5'd0}};

assign tmp_15_fu_194_p2 = (p_shl_cast_fu_178_p1 + p_shl1_cast_fu_190_p1);

assign tmp_16_fu_230_p2 = (tmp_9_cast_fu_226_p1 + tmp_15_fu_194_p2);

assign tmp_17_cast_fu_242_p1 = tmp_16_reg_487;

assign tmp_17_fu_247_p1 = d_i0_V_0_data_out[15:0];

assign tmp_18_fu_235_p3 = cfg0_V[32'd31];

assign tmp_1_fu_371_p4 = {{p_neg5_fu_366_p2[21:6]}};

assign tmp_2_fu_381_p2 = (16'd0 - tmp_1_fu_371_p4);

assign tmp_3_fu_148_p3 = cfg0_V[32'd2];

assign tmp_5_fu_200_p1 = bw20_num_shift_to_le_fu_156_p4;

assign tmp_6_fu_408_p3 = ((ap_reg_pp0_iter9_tmp_19_reg_585[0:0] === 1'b1) ? tmp_2_reg_610 : ap_reg_pp0_iter9_tmp_4_reg_590);

assign tmp_7_cast_fu_210_p1 = sh_V_1_fu_204_p2;

assign tmp_7_fu_170_p3 = {{tmp_9_fu_166_p1}, {7'd0}};

assign tmp_8_fu_214_p2 = ((i_reg_137 == 8'd160) ? 1'b1 : 1'b0);

assign tmp_9_cast_fu_226_p1 = i_reg_137;

assign tmp_9_fu_166_p1 = cfg0_V[1:0];

assign tmp_s_fu_392_p4 = {{p_neg_fu_387_p2[21:6]}};

assign val_assign_cast_fu_275_p1 = ap_reg_pp0_iter3_i_p0n5n10n15n20MHz_l_reg_518;

endmodule //mixer_duc
